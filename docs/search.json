[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GitHub Skill Building Tutorials for Students & Researchers",
    "section": "",
    "text": "Preface\nWelcome to GitHub Workflow Skill Building, a practical tutorial designed to help you develop confidence using Git and GitHub through real-world tasks. Whether you’re an independent researcher, student, or team collaborator, this guide will help you navigate version control effectively using tools like Git GUI, VSCode, and RStudio.\nThis book walks you through the GitHub workflow step-by-step, with separate chapters for each tool and task. You’ll learn not just the “how,” but also the “why” behind key practices in collaborative version control.\nIn these pages, you’ll learn how to:\n\nClone repositories using the browser, Git GUI, VSCode, and RStudio\nCreate new local repositories and connect them to GitHub\nFork other people’s projects and contribute using pull requests\nResolve version conflicts and recover lost or stashed changes\nTroubleshoot common problems with Git and GitHub\nMaintain a healthy repository through everyday best practices\n\nEach chapter is structured around learning objectives, visual instructions, video walkthroughs, and clear troubleshooting tips. You’ll find code snippets and guidance tailored to the platform you prefer to work in, whether you’re coding in R, Python, or just managing documentation.\nBy the end of this book, you’ll be able to:\n\nStart and maintain your own GitHub repositories\nConfidently contribute to others’ projects using forks and branches\nPrevent and resolve version issues\nUse GitHub to support reproducible, collaborative, and well-documented work\n\n\nAbout the Author\nI am an ecological modeler with a focus on aquatic ecosystems, collaborative science, and accessible tools for interdisciplinary work. I created this tutorial to support learners from all backgrounds, whether you are new to version control or looking to build confidence across different platforms. My goal is to make GitHub feel approachable and useful, especially for those working in research, data analysis, or team-based projects. I regularly use Git, R, and Python in my own workflows and hope this guide helps you feel more empowered in yours.\n\n\nHow to Cite This Tutorial\nQuintana, V. (2025). GitHub Skill Building Tutorials for Students & Researchers. Zenodo. https://doi.org/10.5281/zenodo.15717297",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction to GitHub Workflows",
    "section": "",
    "text": "At its core, GitHub allows users to:\nWhile GitHub is commonly used in software development, it is just as valuable for researchers, analysts, students, and interdisciplinary teams working with code, data, or shared documentation.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to GitHub Workflows</span>"
    ]
  },
  {
    "objectID": "intro.html#why-use-github",
    "href": "intro.html#why-use-github",
    "title": "1  Introduction to GitHub Workflows",
    "section": "Why Use GitHub?",
    "text": "Why Use GitHub?\n\n\n\n\n\n\n\nBenefit\nWhat It Enables\n\n\n\n\nVersion tracking\nMaintains a full history of what changed and when\n\n\nSafe experimentation\nAllows testing and editing without disrupting the main work\n\n\nCollaboration\nSupports shared contributions across individuals or teams\n\n\nTransparency\nProvides clear records of authorship and revision details\n\n\nIntegration\nWorks with tools like RStudio, VSCode, and GitHub Desktop\n\n\n\nUsing GitHub keeps your work organized and traceable, whether you’re collaborating on a project, contributing to open-source software, or managing a professional workflow.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to GitHub Workflows</span>"
    ]
  },
  {
    "objectID": "intro.html#key-concepts-and-commands",
    "href": "intro.html#key-concepts-and-commands",
    "title": "1  Introduction to GitHub Workflows",
    "section": "Key Concepts and Commands",
    "text": "Key Concepts and Commands\n\nRepository (Repo)\nA repository is a project folder that contains your files and their version history. Everything related to the project (e.g., code, documents, presentations, models, and applications) can be stored in a repository.\n\nThere are size limitations to keep in mind:\n\nIndividual files should be kept under 100 MB\nRepositories should stay under 1 GB for best performance\nFor larger files such as datasets or media, GitHub recommends using Git Large File Storage (LFS)\n\nRepositories can be public (anyone can view or contribute) or private (access is restricted to selected collaborators). On a GitHub team or organization page, repositories can be managed by multiple team members, each with assigned roles and permissions. This setup makes it easy for groups to collaborate on shared projects, assign tasks, and track progress in one place.\n\n\n\nClone\nCloning means creating a local copy of a GitHub repository so you can work on it from your own computer.\n\n\nFork\nForking copies someone else’s repository to your own GitHub account. It’s typically used when you want to propose changes without editing the original project directly.\n\n\nBranch\nA branch is an independent workspace for editing or adding features. You can create and work on a branch without affecting the main project.\n\n\nCommit\nA commit is a snapshot of your changes, often grouped with a short message that describes what you did.\n\n\nPush\nPushing sends your committed changes from your local machine to GitHub.\n\n\nPull Request (PR)\nA pull request is a formal request to merge your changes into another branch or repository. This is how collaboration, review, and integration happen on GitHub.\n\n\nMerge\nMerging takes the changes from one branch and integrates them into another once it’s completed and reviewed.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to GitHub Workflows</span>"
    ]
  },
  {
    "objectID": "intro.html#when-to-clone-vs.-when-to-fork",
    "href": "intro.html#when-to-clone-vs.-when-to-fork",
    "title": "1  Introduction to GitHub Workflows",
    "section": "When to Clone vs. When to Fork",
    "text": "When to Clone vs. When to Fork\nUnderstanding whether to clone or fork a repository depends on how you plan to interact with the project:\n\n\n\n\n\n\n\n\nSituation\nAction\nWhy\n\n\n\n\nYou are working on your own project (e.g., creating a personal website, analysis, or codebase)\nClone\nYou are the owner and want a local copy of your own repository to edit and manage\n\n\nYou are part of a team or organization and contributing directly to a shared repository\nClone\nYou have direct access and permissions, so you can push updates to the main repo\n\n\nYou want to suggest edits to someone else’s public project but do not have write access\nFork\nForking lets you copy the project to your account, make changes, and submit a pull request without affecting the original\n\n\nYou want to use another repository as a template for your own version\nFork (or “Use this template”)\nForking preserves project history and attribution, giving you a starting point with full editing rights\n\n\n\n\nClone when you’re working on a repository you own or have permission to contribute to directly\nFork when you want to contribute to someone else’s project or experiment without changing the original\n\nBoth actions can help you get a local copy of the repository, but forking creates a separate relationship to the original project with a clear record of where it came from.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to GitHub Workflows</span>"
    ]
  },
  {
    "objectID": "intro.html#summary",
    "href": "intro.html#summary",
    "title": "1  Introduction to GitHub Workflows",
    "section": "Summary",
    "text": "Summary\nGitHub helps you:\n- Maintain clean, version records of your work\n- Collaborate without losing progress or conflicting with others\n- Contribute to shared projects in a structured and transparent way\nThroughout this tutorial, you’ll learn how to apply these concepts using tools like Git GUI, RStudio, and VSCode for working on your own or with a team.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction to GitHub Workflows</span>"
    ]
  },
  {
    "objectID": "best_practices.html",
    "href": "best_practices.html",
    "title": "2  Best Practices to Maintain a GitHub Repository",
    "section": "",
    "text": "Learning Objectives\n\nUnderstand habits that improve collaboration and reduce version control errors\nLearn effective practices for managing changes in GitHub repositories\nApply consistent workflows for using Git across different platforms\n\n\n\nWhy Do Best Practices Matter?\nUsing Git and GitHub effectively is more than just committing and pushing code. It involves managing your repository in a way that keeps it organized, understandable, and collaborative. These practices apply whether you are working alone or with a team.\n\n\nDaily Workflow Best Practices\n\n1. Pull Before You Start\nAlways begin your work session by pulling the latest changes:\ngit pull\nThis ensures your local files are up-to-date with the remote repository and helps avoid merge conflicts later.\n\n\n2. Use Meaningful Commit Messages\nEach commit should explain what and why you made changes:\ngit commit -m \"Fix typo in data summary and update README\"\nAvoid vague messages like “update” or “fix.”\n\n\n3. Push Before You Leave\nBefore ending your work session, commit any final changes and push to GitHub:\ngit add . git commit -m \"Wrap up session and push changes\" git push\nThis keeps your work synced and backed up in the remote repository.\n\n\n\nOrganizational Practices\n\nUse a clear README: Include instructions for how to run the project, data sources, dependencies, and project purpose.\nMaintain file structure: Use directories (e.g., /data, /scripts, /docs) to keep files organized.\nDocument dependencies: Use requirements.txt (Python) or DESCRIPTION (R) to list required packages.\nUse issues and pull requests: Track bugs, suggestions, and feature development using GitHub Issues. Use Pull Requests (PRs) to review and integrate changes.\n\n\n\nCollaboration Tips\n\nBranch for Features or Fixes: Create a new branch for each major feature or change:\ngit checkout -b feature-login-form\nReview Before Merge: Always review changes in a Pull Request before merging into main or master. Leave comments and suggestions when working with others.\nAvoid Committing Sensitive Files: Use a .gitignore file to exclude data files, credentials, or temporary files that shouldn’t be tracked.\n\nBy following these habits, you can prevent conflicts, improve collaboration, and make your GitHub projects easier to maintain over time.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Best Practices to Maintain a GitHub Repository</span>"
    ]
  },
  {
    "objectID": "01_clone_browser.html",
    "href": "01_clone_browser.html",
    "title": "3  Cloning a Repository through a Web Browser",
    "section": "",
    "text": "Learning Objectives\n\nUnderstand what it means to clone or download a GitHub repository\nSuccessfully copy a repository to your local machine from your browser using the GitHub website\nIdentify common errors and learn how to fix them\n\n\n\nStep-by-Step Instructions\n\nOpen the repository you want to copy on GitHub.\nClick the blue Code button.\nSelect Download ZIP.\nSave and unzip the file to your computer.\nThis option gives you the files but does not connect to version control.\n\n\n\nVideo Tutorial\n\n\n\nTroubleshooting\n\nAuthentication failed: Use a personal access token (PAT) if prompted for a password.\nDownloaded ZIP doesn’t update: ZIP files are static and will not reflect future changes to the repository.\n\n\n\nAdditional Resources\n\nGitHub Docs: Cloning a repository\nHappy Git with R",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Cloning a Repository through a Web Browser</span>"
    ]
  },
  {
    "objectID": "01_clone_gitgui.html",
    "href": "01_clone_gitgui.html",
    "title": "4  Cloning a Repository with Git GUI",
    "section": "",
    "text": "Learning Objectives\n\nUnderstand what it means to clone or download a GitHub repository\nSuccessfully copy a repository to your local machine using the GitHub GUI\nIdentify common errors and learn how to fix them\n\n\n\nStep-by-Step Instructions\n\nOpen Git GUI.\nClick “Clone Repository”.\nPaste the repository URL into the Source Location field.\nExample: https://github.com/vmahan1998/GitHub_Basic_Skills.git\nChoose a Target Directory where the local copy should be saved.\nName the directory (typically the same as the repo name “GitHub_Basic_Skills”.\nClick “Clone”. Git GUI will create a local copy of the repository on your machine.\n\n\n\nVideo Tutorial\n\n\n\nTroubleshooting\n\nAuthentication failed: Git GUI may still ask for a GitHub username and password, which no longer work with HTTPS. Use a personal access token (PAT) instead. You can generate one at https://github.com/settings/tokens.\nNothing happens after cloning: Double-check the Source URL and make sure it’s spelled correctly. Also, confirm that the folder you selected as the Target Directory is empty or available.\nCan’t see the files in File Explorer: Git GUI only manages version control. You’ll need to open the folder using your file browser or another tool like VSCode to view and edit files.\n\n\n\nAdditional Resources\n\nGitHub Docs: Cloning a repository\nGitHub Docs: About Git GUI Clients\nGit for Windows (includes Git GUI)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cloning a Repository with Git GUI</span>"
    ]
  },
  {
    "objectID": "01_clone_vscode.html",
    "href": "01_clone_vscode.html",
    "title": "5  Cloning a Repository with VSCode",
    "section": "",
    "text": "Learning Objectives\n\nUnderstand what it means to clone or download a GitHub repository\nSuccessfully copy a repository to your local machine using VSCode\nIdentify common errors and learn how to fix them\n\n\n\nStep-by-Step Instructions\n\nOpen Visual Studio Code (VSCode).\nOn the Welcome page, click Clone Git Repository.\n\nIf you don’t see this option, install the GitHub Extension from the VSCode marketplace.\n\nPaste the repository URL:\nExample: https://github.com/vmahan1998/GitHub_Basic_Skills.git\nChoose a local folder where the repository should be saved.\nName the directory (typically the same as the repo name “GitHub_Basic_Skills”).\nWhen prompted, click “Open” to begin working inside the cloned repository.\n\n\n\nVideo Tutorial\n\n\n\nTroubleshooting\n\nAuthentication failed: If prompted for login credentials, use a personal access token (PAT) instead of a password. Generate one at https://github.com/settings/tokens.\nGit not installed: Make sure Git is installed on your computer and that VSCode can detect it. You can download Git from https://git-scm.com.\nExtension missing: Install the GitHub or Git integration extension from the Extensions Marketplace.\n\n\n\nAdditonal Resources\n\nGitHub Docs: Cloning a repository\nHappy Git with R\nUsing Git in VSCode\nGit for Windows",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Cloning a Repository with VSCode</span>"
    ]
  },
  {
    "objectID": "01_clone_rstudio.html",
    "href": "01_clone_rstudio.html",
    "title": "6  Cloning a Repository with RStudio",
    "section": "",
    "text": "Learning Objectives\n\nUnderstand what it means to clone or download a GitHub repository\nSuccessfully copy a repository to your local machine using RStudio\nIdentify common errors and learn how to fix them\n\n\n\nStep-by-Step Instructions\n\nOpen RStudio.\nGo to File &gt; New Project &gt; Version Control &gt; Git.\nPaste the URL for the repository you want to clone:\nExample: https://github.com/vmahan1998/GitHub_Basic_Skills.git\nChoose a directory where you want to store the project.\nName the directory (typically the same as the repo name “GitHub_Basic_Skills”).\nClick Create Project. RStudio will open the cloned repository in a new project workspace.\n\n\n\nVideo Tutorial\n\n\n\nTroubleshooting\n\nAuthentication failed: RStudio may prompt you for GitHub credentials. If using HTTPS, you must enter a personal access token (PAT) instead of your password. You can create one at https://github.com/settings/tokens.\nGit not configured in RStudio: If Git is not detected, go to Tools &gt; Global Options &gt; Git/SVN and set the path to your Git executable (usually git.exe).\nMissing Git option in New Project menu: Install Git for Windows or macOS and restart RStudio.\nProject won’t open or clone fails: Double-check the URL and ensure that you selected the correct folder and have internet access.\n\n\n\nAdditional Resources\n\nGitHub Docs: Cloning a repository\nHappy Git with R\nRStudio Git Integration\nGit for Windows",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Cloning a Repository with RStudio</span>"
    ]
  },
  {
    "objectID": "02_newrepo_gitgui.html",
    "href": "02_newrepo_gitgui.html",
    "title": "7  Creating a New Repository with Git GUI",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Creating a New Repository with Git GUI</span>"
    ]
  },
  {
    "objectID": "02_newrepo_gitgui.html#create-the-repository",
    "href": "02_newrepo_gitgui.html#create-the-repository",
    "title": "7  Creating a New Repository with Git GUI",
    "section": "Create the Repository",
    "text": "Create the Repository",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Creating a New Repository with Git GUI</span>"
    ]
  },
  {
    "objectID": "02_newrepo_gitgui.html#initialize-the-repository-on-github",
    "href": "02_newrepo_gitgui.html#initialize-the-repository-on-github",
    "title": "7  Creating a New Repository with Git GUI",
    "section": "Initialize the Repository on GitHub",
    "text": "Initialize the Repository on GitHub",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Creating a New Repository with Git GUI</span>"
    ]
  },
  {
    "objectID": "02_newrepo_gitgui.html#push-the-repository-to-github",
    "href": "02_newrepo_gitgui.html#push-the-repository-to-github",
    "title": "7  Creating a New Repository with Git GUI",
    "section": "Push the Repository to GitHub",
    "text": "Push the Repository to GitHub",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Creating a New Repository with Git GUI</span>"
    ]
  },
  {
    "objectID": "02_newrepo_vscode.html",
    "href": "02_newrepo_vscode.html",
    "title": "8  Creating a New Repository with VSCode",
    "section": "",
    "text": "Learning Objectives\n\nUnderstand what it means to create a new repository on GitHub\nSuccessfully create a local Git repository in VSCode and push it to GitHub\nIdentify common errors and learn how to fix them\n\n\n\nStep-by-Step Instructions\n\nPart 1: Create a Local Repository in VSCode\n\nOpen Visual Studio Code (VSCode).\nCreate a new folder on your computer and open it in VSCode.\nInside VSCode, go to View &gt; Source Control or click the Source Control icon on the left sidebar.\nClick Initialize Repository to turn the folder into a local Git repository.\nCreate or add your project files (e.g., README.md, .py, .R, or .ipynb files).\n\n\n\nPart 2: Create a Repository on GitHub\n\nIn your browser, go to GitHub.com and sign in.\nClick the + icon in the upper-right and select New Repository.\nName your repository (e.g., my-new-repo).\nImportant: Do not initialize the repo with a README, .gitignore, or license (this prevents conflicts).\nClick Create Repository.\n\n\n\nPart 3: Link and Push to GitHub\n\nIn VSCode, open the Terminal (View &gt; Terminal).\nIn the Terminal type:\n\ngit remote add origin https://github.com/vmahan1998/GitHub_Basic_Skills_Create_Repo_Test_VSCode.git\ngit branch -M main\ngit push -u origin main\n\n\n\n\n\nVideo Tutorial\n\nCreate the Repository\n\n\n\nPush the Repository to GitHub\n\n\n\n\nTroubleshooting\n\nRemote repository not found:\nMake sure you created the repository on GitHub and copied the correct URL. RStudio does not create remote repositories.\nRStudio can:\n\nCreate a local Git project on your computer\nConnect to an existing remote repository (one that already exists on GitHub)\nPush local changes to that remote\n\nAuthentication failed:\nGitHub no longer accepts passwords for HTTPS. If prompted, use a personal access token (PAT) in place of your password.\nPush fails due to README or file conflicts:\nMake sure your GitHub repository was created without initializing it with a README, .gitignore, or license. These files can create merge conflicts when pushing from RStudio.\nMissing Git in RStudio:\nIf Git options don’t appear when creating a new project, go to Tools &gt; Global Options &gt; Git/SVN and verify that RStudio detects Git. You may need to install Git from git-scm.com and restart RStudio.\nPushed changes not showing on GitHub:\nMake sure you pushed to the correct remote and branch. Use Git &gt; Push again in RStudio and check your GitHub repository online to confirm.\n\n\n\nAdditonal Resources\n\nGitHub Docs: Cloning a repository\nHappy Git with R\nUsing Git in VSCode\nGit for Windows",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Creating a New Repository with VSCode</span>"
    ]
  },
  {
    "objectID": "02_newrepo_rstudio.html",
    "href": "02_newrepo_rstudio.html",
    "title": "9  Creating a New Repository with Rstudio",
    "section": "",
    "text": "Learning Objectives\n\nUnderstand what it means to create a new repository on GitHub\nSuccessfully create a local Git repository in RStudio and push it to GitHub\nIdentify common errors and learn how to fix them\n\n\n\nStep-by-Step Instructions\n\nOpen RStudio.\nGo to File &gt; New Project &gt; New Directory &gt; Empty Project.\nChoose a folder name and directory location for your new project.\nCheck the box for “Create a git repository” (this initializes Git locally).\nClick Create Project. Your new project will open with Git enabled.\nCreate or add your project files (e.g., README.md, .R scripts, data).\nIn your browser, create a new repository on GitHub.com.\n\nDo not initialize it with a README, license, or .gitignore.\n\nBack in RStudio, go to the Terminal pane and run:\n\ngit remote add origin https://github.com/yourusername/your-repo-name.git\ngit branch -M main\ngit push -u origin main\n\n\n\n\nVideo Tutorial\n\nCreate the Repository\n\n\n\nPush the Repository to GitHub\n\n\n\n\nTroubleshooting\n\nRemote repository not found:\nMake sure you created the repository on GitHub and copied the correct URL. RStudio does not create remote repositories.\nRStudio can:\n\nCreate a local Git project on your computer\nConnect to an existing remote repository (one that already exists on GitHub)\nPush local changes to that remote\n\nAuthentication failed:\nGitHub no longer accepts passwords for HTTPS. If prompted, use a personal access token (PAT) in place of your password.\nPush fails due to README or file conflicts:\nMake sure your GitHub repository was created without initializing it with a README, .gitignore, or license. These files can create merge conflicts when pushing from RStudio.\nMissing Git in RStudio:\nIf Git options don’t appear when creating a new project, go to Tools &gt; Global Options &gt; Git/SVN and verify that RStudio detects Git. You may need to install Git from git-scm.com and restart RStudio.\nPushed changes not showing on GitHub:\nMake sure you pushed to the correct remote and branch. Use Git &gt; Push again in RStudio and check your GitHub repository online to confirm.\n\n\n\nAdditional Resources\n\nGitHub Docs: Creating a repository\n\n\n\nHappy Git with R\nRStudio Git Integration\nGit for Windows",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Creating a New Repository with Rstudio</span>"
    ]
  },
  {
    "objectID": "03_fork_gitgui.html",
    "href": "03_fork_gitgui.html",
    "title": "10  Forking a Repository and Making Changes with Git GUI",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Forking a Repository and Making Changes with Git GUI</span>"
    ]
  },
  {
    "objectID": "03_fork_gitgui.html#part-1-fork-the-repository-on-github",
    "href": "03_fork_gitgui.html#part-1-fork-the-repository-on-github",
    "title": "10  Forking a Repository and Making Changes with Git GUI",
    "section": "Part 1: Fork the Repository on GitHub",
    "text": "Part 1: Fork the Repository on GitHub\n\nNavigate to the public repository you want to contribute to. (e.g., https://github.com/vmahan1998/GitHub_Basic_Skills.git)\nClick the “Fork button in the top-right corner of the page.\nChoose your GitHub account as the destination for the fork.\nGitHub will create a copy of the repository under your account.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Forking a Repository and Making Changes with Git GUI</span>"
    ]
  },
  {
    "objectID": "03_fork_gitgui.html#part-2-clone-the-forked-repository-locally",
    "href": "03_fork_gitgui.html#part-2-clone-the-forked-repository-locally",
    "title": "10  Forking a Repository and Making Changes with Git GUI",
    "section": "Part 2: Clone the Forked Repository Locally",
    "text": "Part 2: Clone the Forked Repository Locally\n\nOpen Git GUI.\nClick “Clone Existing Repository”.\nCopy the URL of your forked repository from GitHub (e.g., https://github.com/yourusername/repo-name.git).\nPaste the URL into the Source Location field.\nChoose a Target Directory and name the folder (e.g., repo-name).\nClick “Clone”.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Forking a Repository and Making Changes with Git GUI</span>"
    ]
  },
  {
    "objectID": "03_fork_gitgui.html#part-3-create-new-branch",
    "href": "03_fork_gitgui.html#part-3-create-new-branch",
    "title": "10  Forking a Repository and Making Changes with Git GUI",
    "section": "Part 3: Create New Branch",
    "text": "Part 3: Create New Branch\n\nIn Git GUI, go to Branch &gt; Create.\nName your new branch (e.g., fix-typo, feature-new-header, or update-readme).\nClick “Create” to switch to the new branch.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Forking a Repository and Making Changes with Git GUI</span>"
    ]
  },
  {
    "objectID": "03_fork_gitgui.html#part-4-make-and-commit-changes-locally",
    "href": "03_fork_gitgui.html#part-4-make-and-commit-changes-locally",
    "title": "10  Forking a Repository and Making Changes with Git GUI",
    "section": "Part 4: Make and Commit Changes Locally",
    "text": "Part 4: Make and Commit Changes Locally\n\nOpen the cloned folder in File Explorer and make changes to the project files (e.g., README.md or code).\nIn Git GUI, click “Rescan to detect changes.\nStage your changes by clicking “Stage Changed”.\nWrite a commit message describing your changes and click “Commit”.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Forking a Repository and Making Changes with Git GUI</span>"
    ]
  },
  {
    "objectID": "03_fork_gitgui.html#part-5-push-changes-to-your-fork-on-github",
    "href": "03_fork_gitgui.html#part-5-push-changes-to-your-fork-on-github",
    "title": "10  Forking a Repository and Making Changes with Git GUI",
    "section": "Part 5: Push Changes to Your Fork on GitHub",
    "text": "Part 5: Push Changes to Your Fork on GitHub\n\nGo to Remote &gt; Push.\nMake sure you are pushing to your fork (new-message) and to the appropriate branch (main or master).\nClick “Push” to upload your changes.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Forking a Repository and Making Changes with Git GUI</span>"
    ]
  },
  {
    "objectID": "03_fork_gitgui.html#part-6-create-a-pull-request",
    "href": "03_fork_gitgui.html#part-6-create-a-pull-request",
    "title": "10  Forking a Repository and Making Changes with Git GUI",
    "section": "Part 6: Create a Pull Request",
    "text": "Part 6: Create a Pull Request\n\nVisit your fork on GitHub.\nClick “Compare & pull request”.\nAdd a title and description of your changes.\nClick “Create pull request” to submit your contribution to the original repository.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Forking a Repository and Making Changes with Git GUI</span>"
    ]
  },
  {
    "objectID": "03_fork_gitgui.html#part-7-merge-pull-request-for-repository-maintainers",
    "href": "03_fork_gitgui.html#part-7-merge-pull-request-for-repository-maintainers",
    "title": "10  Forking a Repository and Making Changes with Git GUI",
    "section": "Part 7: Merge Pull Request (for repository maintainers)",
    "text": "Part 7: Merge Pull Request (for repository maintainers)\n\nIn the original repository (or in your fork if you’re an owner), open the pull request.\nClick “Merge pull request”.\nConfirm by clicking “Confirm”.\nAfter merging, you can safely delete the branch you created.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Forking a Repository and Making Changes with Git GUI</span>"
    ]
  },
  {
    "objectID": "03_fork_vscode.html",
    "href": "03_fork_vscode.html",
    "title": "11  Fork a New Repository with VSCode",
    "section": "",
    "text": "Learning Objectives\n\nUnderstand what it means to fork a repository on GitHub\nSuccessfully fork a repository on GitHub and make changes locally using VSCode\nIdentify common errors and learn how to fix them\n\n\n\nStep-by-Step Instructions\n\nPart 1: Fork the Repository on GitHub\n\nNavigate to the public repository you want to contribute to. (e.g., https://github.com/vmahan1998/GitHub_Basic_Skills.git)\nClick the “Fork button in the top-right corner of the page.\nChoose your GitHub account as the destination for the fork.\nGitHub will create a copy of the repository under your account.\n\n\n\nPart 2: Clone the Forked Repository Locally\n\nOpen Visual Studio Code (VSCode).\nOn the Welcome page, click Clone Git Repository.\n\nIf you don’t see this option, install the GitHub Extension from the VSCode marketplace.\n\nPaste the repository URL.\nChoose a local folder where the repository should be saved.\nName the directory (typically the same as the repo name “GitHub_Basic_Skills”).\nWhen prompted, click “Open” to begin working inside the cloned repository.\n\n\n\nPart 3: Create New Branch\n\nIn VSCode, open the Source Control sidebar (click the branch icon or press Ctrl+Shift+G).\nClick the branch name (e.g., main) in the lower-left corner or at the top of the Source Control pane.\nSelect “Create new branch” from the dropdown.\nEnter a name for your branch (e.g., new-message) and press “Enter”.\nVSCode will automatically switch you to the new branch.\n\n\n\nPart 4: Make and Commit Changes Locally\n\nEdit the files in VSCode as needed (e.g., modify EDIT_ME.md or source code).\n\n\n\nSave your changes (Ctrl+S or File &gt; Save).\n\n\n\nOpen the Source Control pane.\n\n\n\nYou should see your changed files listed.\n\n\n\nHover over the file and click the + icon to stage it, or click the + icon next to Changes to stage all files.\n\n\n\nIn the message box at the top, write a clear and descriptive commit message.\n\n\n\nClick the “✓” Commit button (or use the check mark icon).\n\n\n\nClick the “↥” Push icon in the bottom bar or from the Source Control menu to push your branch to GitHub.\n\n\n\nPart 6: Create a Pull Request\n\nGo to your forked repository on GitHub in a web browser.\nGitHub will prompt you to compare & open a pull request.\nClick “Compare & pull request”.\nAdd a descriptive title and explanation of your changes.\nClick “Create pull request” to propose your contribution to the original repository.\n\n\n\nPart 7: Merge Pull Request (for repository maintainers)\n\nIf you have permission, go to the pull request on the original repository.\nReview the changes and click “Merge pull request”.\nConfirm the merge and delete the feature branch if no longer needed.\n\n\n\n\nVideo Tutorial\n\nFork the Repository\n\n\n\nCreate a Pull Request\n\n\n\nMerge a Pull Request\n\n\n\n\nTroubleshooting\n\nRemote repository not found\nMake sure you created the repository on GitHub and copied the correct HTTPS or SSH URL. VSCode does not create remote repositories — it only connects to them.\nVSCode can:\n\nClone a remote repository from GitHub\nConnect your local changes to a remote repo via Git\nPush changes to an existing remote repository\n\nAuthentication failed\nGitHub no longer supports passwords for HTTPS. If prompted, use a personal access token (PAT) instead. You can generate one at https://github.com/settings/tokens.\nPush fails due to README or file conflicts\nIf the GitHub repo was initialized with a README, license, or .gitignore, and your local repo wasn’t, this can cause merge conflicts. Create your GitHub repo without those options when pushing an existing local project.\nGit not detected\nIf Git features don’t appear in VSCode, install Git from https://git-scm.com and restart VSCode. Go to View &gt; Command Palette &gt; Git: Show Git Output to check if it’s recognized.\nPushed changes not showing on GitHub\nMake sure you pushed to the correct remote (usually origin) and correct branch (main or master). You can check the branch in the bottom-left corner of VSCode.\n\n\n\nAdditonal Resources\n\nGitHub Docs: Cloning a repository\nUsing Git in VSCode\nGitHub Docs: Creating a personal access token",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Fork a New Repository with VSCode</span>"
    ]
  },
  {
    "objectID": "03_fork_rstudio.html",
    "href": "03_fork_rstudio.html",
    "title": "12  Fork a New Repository with RStudio",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Fork a New Repository with RStudio</span>"
    ]
  },
  {
    "objectID": "03_fork_rstudio.html#part-1-fork-the-repository-on-github",
    "href": "03_fork_rstudio.html#part-1-fork-the-repository-on-github",
    "title": "12  Fork a New Repository with RStudio",
    "section": "Part 1: Fork the Repository on GitHub",
    "text": "Part 1: Fork the Repository on GitHub\n\nNavigate to the public repository you want to contribute to. (e.g., https://github.com/vmahan1998/GitHub_Basic_Skills.git)\nClick the “Fork button in the top-right corner of the page.\nChoose your GitHub account as the destination for the fork.\nGitHub will create a copy of the repository under your account.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Fork a New Repository with RStudio</span>"
    ]
  },
  {
    "objectID": "03_fork_rstudio.html#part-2-clone-the-forked-repository-locally",
    "href": "03_fork_rstudio.html#part-2-clone-the-forked-repository-locally",
    "title": "12  Fork a New Repository with RStudio",
    "section": "Part 2: Clone the Forked Repository Locally",
    "text": "Part 2: Clone the Forked Repository Locally\n\nOpen RStudio.\nGo to File &gt; New Project &gt; Version Control &gt; Git.\nPaste the URL for the repository you want to clone:\nExample: “https://github.com/yourusername/your-repo-name.git”\nChoose a directory where you want to store the project.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Fork a New Repository with RStudio</span>"
    ]
  },
  {
    "objectID": "03_fork_rstudio.html#part-3-create-new-branch",
    "href": "03_fork_rstudio.html#part-3-create-new-branch",
    "title": "12  Fork a New Repository with RStudio",
    "section": "Part 3: Create New Branch",
    "text": "Part 3: Create New Branch\n\nIn the Terminal in RStudio type:\n\n-   git checkout -b new-message\nNote: “new-message” is the name of the new branch.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Fork a New Repository with RStudio</span>"
    ]
  },
  {
    "objectID": "03_fork_rstudio.html#part-4-make-and-commit-changes-locally",
    "href": "03_fork_rstudio.html#part-4-make-and-commit-changes-locally",
    "title": "12  Fork a New Repository with RStudio",
    "section": "Part 4: Make and Commit Changes Locally",
    "text": "Part 4: Make and Commit Changes Locally\n\nEdit files in the RStudio editor as needed (e.g., modify EDIT_ME.md or code scripts).\nIn the Git tab (upper-right pane), click “Refresh” or”Commit”.\nStage the files you changed by checking the boxes next to them.\nAdd a descriptive commit message in the message box.\nClick “Commit”.\nClick the green arrow pointed north to push changes to GitHub Repo.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Fork a New Repository with RStudio</span>"
    ]
  },
  {
    "objectID": "03_fork_rstudio.html#part-6-create-a-pull-request",
    "href": "03_fork_rstudio.html#part-6-create-a-pull-request",
    "title": "12  Fork a New Repository with RStudio",
    "section": "Part 6: Create a Pull Request",
    "text": "Part 6: Create a Pull Request\n\nGo to your forked repository on GitHub in a web browser.\nGitHub will prompt you to compare & open a pull request.\nClick “Compare & pull request”.\nAdd a descriptive title and explanation of your changes.\nClick “Create pull request” to propose your contribution to the original repository.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Fork a New Repository with RStudio</span>"
    ]
  },
  {
    "objectID": "03_fork_rstudio.html#part-7-merge-pull-request-for-repository-maintainers",
    "href": "03_fork_rstudio.html#part-7-merge-pull-request-for-repository-maintainers",
    "title": "12  Fork a New Repository with RStudio",
    "section": "Part 7: Merge Pull Request (for repository maintainers)",
    "text": "Part 7: Merge Pull Request (for repository maintainers)\n\nIf you have permission, go to the pull request on the original repository.\nReview the changes and click “Merge pull request”.\nConfirm the merge and delete the feature branch if no longer needed.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Fork a New Repository with RStudio</span>"
    ]
  },
  {
    "objectID": "03_fork_rstudio.html#fork-the-repository",
    "href": "03_fork_rstudio.html#fork-the-repository",
    "title": "12  Fork a New Repository with RStudio",
    "section": "Fork the Repository",
    "text": "Fork the Repository",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Fork a New Repository with RStudio</span>"
    ]
  },
  {
    "objectID": "03_fork_rstudio.html#clone-the-repository-create-a-new-branch-and-edit-files",
    "href": "03_fork_rstudio.html#clone-the-repository-create-a-new-branch-and-edit-files",
    "title": "12  Fork a New Repository with RStudio",
    "section": "Clone the Repository, Create a New Branch, and Edit Files",
    "text": "Clone the Repository, Create a New Branch, and Edit Files",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Fork a New Repository with RStudio</span>"
    ]
  },
  {
    "objectID": "03_fork_rstudio.html#create-a-pull-request",
    "href": "03_fork_rstudio.html#create-a-pull-request",
    "title": "12  Fork a New Repository with RStudio",
    "section": "Create a Pull Request",
    "text": "Create a Pull Request",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Fork a New Repository with RStudio</span>"
    ]
  },
  {
    "objectID": "03_fork_rstudio.html#merge-a-pull-request",
    "href": "03_fork_rstudio.html#merge-a-pull-request",
    "title": "12  Fork a New Repository with RStudio",
    "section": "Merge a Pull Request",
    "text": "Merge a Pull Request",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Fork a New Repository with RStudio</span>"
    ]
  },
  {
    "objectID": "04_conflicts.html",
    "href": "04_conflicts.html",
    "title": "13  Addressing Version Conflicts",
    "section": "",
    "text": "Learning Objectives",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Addressing Version Conflicts</span>"
    ]
  },
  {
    "objectID": "04_conflicts.html#step-4-complete-the-merge-or-pull",
    "href": "04_conflicts.html#step-4-complete-the-merge-or-pull",
    "title": "13  Addressing Version Conflicts",
    "section": "13.1 Step 4: Complete the Merge or Pull",
    "text": "13.1 Step 4: Complete the Merge or Pull\nIf you were merging:\ngit commit -m \"Resolve merge conflict in filename.ext\"\nIf you were pulling:\ngit pull --continue",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Addressing Version Conflicts</span>"
    ]
  },
  {
    "objectID": "05_stashed_changes.html",
    "href": "05_stashed_changes.html",
    "title": "14  Recovering Stashed Changes",
    "section": "",
    "text": "Learning Objectives\n\nUnderstand what it means to stash changes in Git\nLearn how to view, apply, or drop stashed changes\nRestore work safely after interruptions or switching branches\n\n\n\nWhat Is Git Stash?\nStashing temporarily saves your uncommitted changes so you can work on something else without losing progress. Git stores these changes in a stack, which you can apply later to continue where you left off.\n\n\nWhen to Use Stash\nYou are in the middle of editing files but need to:\n\nSwitch branches\nPull new changes from the remote\nRun or test something cleanly without committing unfinished work\n\n\n\nStep-by-Step Instructions\n\nStep 1: Stash Your Changes\nIn your terminal or Git interface, run:\ngit stash\nThis command stashes all tracked changes. If you also want to stash untracked files:\ngit stash -u\nYou will see a confirmation message like:\nSaved working directory and index state WIP on main: abc1234 Update index file\n\n\nStep 2: List All Stashes\nYou can view all stored stashes with:\ngit stash list\nOutput will look like:\nstash@{0}: WIP on main: abc1234 Update index file stash@{1}: WIP on feature-branch: def5678 Add draft\n\n\nStep 3: Apply a Stash\nTo apply the most recent stash:\ngit stash apply\nTo apply a specific stash from the list:\ngit stash apply stash@{1}\nTo both apply and remove the stash:\ngit stash pop\n\n\nStep 4: Continue Your Work\nAfter applying the stash:\n\nOpen your files\nMake any additional edits\nStage and commit your changes as usual\n\n\n\n\nTool-Specific Tips\n\nRStudio\n\nUse the Terminal tab to run stash commands\nThere is no Git stash functionality in the Git tab\n\n\n\nVSCode\n\nUse the built-in Terminal to stash or apply\nExtensions like GitLens allow visual stash management\n\n\n\nGit GUI\n\nStashing is not supported in the interface\nUse Git Bash or another terminal to stash or apply changes\n\n\n\n\nTroubleshooting\n\nStash doesn’t apply: Check for merge conflicts or try a specific stash with git stash apply stash@{0}\nChanges disappear after popping: Use git stash list to confirm the stash was removed\nForgot what you stashed: Use git stash show -p to review details of a stash\n\n\n\nAdditional Resources\n\nGitHub Docs: git stash\n\n\n\nHappy Git with R: Stashing\n\n\n\nPro Git Book: Git Stashing",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Recovering Stashed Changes</span>"
    ]
  },
  {
    "objectID": "06_problems.html",
    "href": "06_problems.html",
    "title": "15  Troubleshooting Common Problems",
    "section": "",
    "text": "Learning Objectives\n\nRecognize several common problems when using GitHub\nLearn how to troubleshoot common Git issues with step-by-step solutions\nBuild confidence navigating authentication, syncing, and collaboration challenges\n\n\n\nWhat Are Common GitHub Problems?\nEven experienced users encounter problems when working with Git and GitHub. These issues usually occur during setup, collaboration, or when switching between tools like RStudio, VSCode, and Git GUI.\n\n\nWhen Do These Problems Occur?\n\nPushing changes without proper authentication\nPulling updates when your local files have diverged\nConflicting file versions due to multiple contributors\nForgetting to stage, commit, or sync your changes\nNot configuring Git properly the first time\n\n\n\nStep-by-Step Guide to Fix Common Issues\n\nProblem 1: Authentication Failed\nWhat it looks like: You’re prompted for a password, but login fails.\nWhy it happens: GitHub no longer supports password authentication for HTTPS.\nSolution:\n\nGenerate a Personal Access Token (PAT).\nUse the token in place of your GitHub password when prompted.\nConsider using an SSH key for future sessions (especially in VSCode).\n\n\n\nProblem 2: Repo Exists on GitHub, But Push Fails\nWhat it looks like: You get an error saying remote repository not found or push is rejected.\nWhy it happens: The GitHub repo is initialized with a README or other files that conflict with your local setup.\nSolution:\n\nWhen creating the repo on GitHub, do not initialize with README, license, or .gitignore.\nIf conflicts exist, pull first:\ngit pull origin main --allow-unrelated-histories\nResolve any conflicts, then push.\n\n\n\nProblem 3: Git Not Detected\nWhat it looks like: Git features are missing in RStudio or VSCode.\nWhy it happens: Git is not installed or not properly linked to your IDE.\nSolution:\n\nInstall Git from git-scm.com.\nRestart your IDE.\nIn RStudio: Go to Tools &gt; Global Options &gt; Git/SVN and verify the Git executable path.\nIn VSCode: Git should be detected automatically. If not, check your system path.\n\n\n\nProblem 4: Changes Aren’t Showing on GitHub\nWhat it looks like: You committed locally, but nothing appears in your GitHub repo.\nWhy it happens: You forgot to push your changes.\nSolution:\n\nAfter committing, push using:\ngit push origin main\nRefresh the GitHub page to confirm.\n\n\n\nProblem 5: You Cloned the Wrong Repo or Fork\nWhat it looks like: You’re editing a repo, but you can’t push changes.\nWhy it happens: You cloned the original repo instead of your fork.\nSolution:\n\nFork the original repository on GitHub.\nClone your fork, not the original project.\nConfirm your remote URL with:\ngit remote -v\n\n\n\n\nTool-Specific Tips\n\nRStudio\n\nUse the Git tab to commit and push\nIf Git tab is missing, configure Git in Tools &gt; Global Options &gt; Git/SVN\n\n\n\nVSCode\n\nUse the Source Control tab\nLook for inline errors or tooltips when actions fail\n\n\n\nGit GUI\n\nUse “Rescan” and “Push” manually\nAdd remote via Remote &gt; Add\n\n\n\n\nSummary\n\n\n\n\n\n\n\nProblem\nFix\n\n\n\n\nAuthentication fails\nUse PAT or set up SSH\n\n\nPush fails due to README conflict\nDon’t initialize GitHub repo with README\n\n\nGit not recognized\nInstall Git and restart IDE\n\n\nCan’t push changes\nMake sure you’re on the correct branch and have committed\n\n\nWrong repo cloned\nConfirm remote URL matches your GitHub fork\n\n\n\n\n\nAdditional Resources\n\nHappy Git with R\nPro Git Book\nVSCode Docs: Git Support",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Troubleshooting Common Problems</span>"
    ]
  }
]